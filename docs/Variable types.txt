Type safe environment variables
The astro:env API lets you configure a type-safe schema for environment variables you have set. This allows you to indicate whether they should be available on the server or the client, and define their data type and additional properties.

Developing an adapter? See how to make an adapter compatible with astro:env.
Basic Usage
Define your schema
To configure a schema, add the env.schema option to your Astro config:

astro.config.mjs
import { defineConfig } from "astro/config";

export default defineConfig({
  env: {
    schema: {
      // ...
    }
  }
})

You can then register variables as a string, number, enum, or boolean using the envField helper. Define the kind of environment variable by providing a context ("client" or "server") and access ("secret" or "public") for each variable, and pass any additional properties such as optional or default in an object:

astro.config.mjs
import { defineConfig, envField } from "astro/config";

export default defineConfig({
  env: {
    schema: {
      API_URL: envField.string({ context: "client", access: "public", optional: true }),
      PORT: envField.number({ context: "server", access: "public", default: 4321 }),
      API_SECRET: envField.string({ context: "server", access: "secret" }),
    }
  }
})

Types will be generated for you when running astro dev or astro build, but you can run astro sync to generate types only.

Use variables from your schema
Import and use your defined variables from the appropriate /client or /server module:

---
import { API_URL } from "astro:env/client";
import { API_SECRET_TOKEN } from "astro:env/server";

const data = await fetch(`${API_URL}/users`, {
  method: "GET",
  headers: {
    "Content-Type": "application/json",
    "Authorization": `Bearer ${API_SECRET_TOKEN}`
  },
})
---

<script>
  import { API_URL } from "astro:env/client";

  fetch(`${API_URL}/ping`)
</script>

Variable types
There are three kinds of environment variables, determined by the combination of context ("client" or "server") and access ("secret" or "public") settings defined in your schema:

Public client variables: These variables end up in both your final client and server bundles, and can be accessed from both client and server through the astro:env/client module:

import { API_URL } from "astro:env/client";

Public server variables: These variables end up in your final server bundle and can be accessed on the server through the astro:env/server module:

import { PORT } from "astro:env/server";

Secret server variables: These variables are not part of your final bundle and can be accessed on the server through the astro:env/server module:

import { API_SECRET } from "astro:env/server";

By default, secrets are only validated at runtime. You can enable validating private variables on start by configuring validateSecrets: true.